package com.design.pattern.adapter;

/**
 * 
 * @Title: Sourceable
 * @Description:适配器模式（Adapter）
 * @see 第三种适配器模式是接口的适配器模式，接口的适配器是这样的：有时我们写的一个接口中有多个抽象方法，当我们写该接口的实现类时，
 *      必须实现该接口的所有方法，这明显有时比较浪费，
 *      因为并不是所有的方法都是我们需要的，有时只需要某一些，此处为了解决这个问题，我们引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接口，
 *      实现了所有的方法， 而我们不和原始的接口打交道，只和该抽象类取得联系，所以我们写一个类，继承该抽象类，重写我们需要的方法就行。看一下类图：
 *      这个很好理解，在实际开发中，我们也常会遇到这种接口中定义了太多的方法，以致于有时我们在一些实现类中并不是都需要。看代码：
 * @Author: zhaotf
 * @Since:2017年6月1日 下午4:41:50
 * @Version:1.0
 */
public interface Sourceable {

	public void method1();

	public void method2();
}
